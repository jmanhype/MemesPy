[build-system]
requires = ["setuptools>=69.0.0", "wheel>=0.42.0"]
build-backend = "setuptools.build_meta"

[project]
name = "dspy-meme-gen"
version = "0.1.0"
description = "A sophisticated meme generation pipeline using DSPy"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Framework :: AsyncIO",
    "Framework :: FastAPI",
    "Framework :: Pytest",
    "Framework :: SQLAlchemy",
    "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/yourusername/dspy-meme-gen"
Documentation = "https://dspy-meme-gen.readthedocs.io/"
Repository = "https://github.com/yourusername/dspy-meme-gen.git"
"Bug Tracker" = "https://github.com/yourusername/dspy-meme-gen/issues"
Changelog = "https://github.com/yourusername/dspy-meme-gen/blob/main/CHANGELOG.md"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["dspy_meme_gen*"]
namespaces = false

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/docs/
'''

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP",  # pyupgrade
    "N",  # pep8-naming
    "YTT",  # flake8-2020
    "S",  # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",  # flake8-builtins
    "COM",  # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "DJ",  # flake8-django
    "EM",  # flake8-errmsg
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",  # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",  # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",  # pylint
    "TRY",  # tryceratops
    "RUF",  # ruff-specific rules
]
ignore = [
    "PLR",  # Design related pylint codes
    "E501",  # Line too long
]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "S101",  # Use of assert detected
    "S102",  # Use of exec detected
    "S103",  # bad-file-permissions
    "S104",  # Possible binding to all interfaces
    "S105",  # hardcoded-password-string
    "S106",  # hardcoded-password-func-arg
    "S107",  # hardcoded-password-default
    "S108",  # hardcoded-tmp-directory
    "S109",  # password-config-option-not-marked-secret
    "S110",  # try-except-pass
    "S112",  # try-except-continue
    "S113",  # request-without-timeout
    "S301",  # suspicious-pickle-usage
    "S302",  # suspicious-marshal-usage
    "S303",  # suspicious-insecure-hash-usage
    "S304",  # suspicious-insecure-cipher-usage
    "S305",  # suspicious-xml-element-tree-usage
    "S306",  # suspicious-xml-mini-dom-usage
    "S307",  # suspicious-xml-expat-reader-usage
    "S308",  # suspicious-xml-sax-usage
    "S309",  # suspicious-xml-etree-usage
    "S310",  # suspicious-xml-expatbuilder-usage
    "S311",  # suspicious-non-cryptographic-random-usage
    "S312",  # suspicious-telnetlib-usage
    "S313",  # suspicious-xmlrpclib-usage
    "S314",  # suspicious-xml-dom-usage
    "S315",  # suspicious-xml-xpath-usage
    "S316",  # suspicious-xml-pulldom-usage
    "S317",  # suspicious-xml-sax-dom-usage
    "S318",  # suspicious-xml-sax-handler-usage
    "S319",  # suspicious-xml-sax-reader-usage
    "S320",  # suspicious-xml-sax-utils-usage
    "S321",  # suspicious-xml-dom-minidom-usage
    "S322",  # suspicious-xml-dom-pulldom-usage
    "S323",  # suspicious-xml-dom-xmlbuilder-usage
    "S324",  # hashlib-insecure-hash-function
    "S501",  # request-with-no-cert-validation
    "S502",  # ssl-with-no-version
    "S503",  # ssl-with-bad-version
    "S504",  # ssl-with-no-cert-validation
    "S505",  # weak-cryptographic-key
    "S506",  # unsafe-yaml-load
    "S507",  # ssh-no-host-key-verification
    "S508",  # snmp-insecure-version
    "S509",  # snmp-weak-cryptography
    "S601",  # paramiko-call
    "S602",  # subprocess-popen-with-shell-equals-true
    "S603",  # subprocess-without-shell-equals-true
    "S604",  # call-with-shell-equals-true
    "S605",  # start-process-with-partial-path
    "S606",  # start-process-with-no-shell
    "S607",  # start-process-with-a-shell
    "S608",  # hardcoded-sql-expression
    "S609",  # unix-command-wildcard-injection
    "S610",  # sql-injection-extra
    "S611",  # sqlalchemy-sql-injection
    "S612",  # flask-debug-true
    "S701",  # jinja2-autoescape-false
    "S702",  # mako-autoescape-false
]

[tool.ruff.isort]
known-first-party = ["dspy_meme_gen"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
combine-as-imports = true
split-on-trailing-comma = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --cov=dspy_meme_gen --cov-report=term-missing --cov-report=xml --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "slow: marks tests as slow",
    "api: marks tests as API tests",
    "db: marks tests as database tests",
    "meme: marks tests as meme generation tests",
    "trend: marks tests as trend scanning tests",
    "format: marks tests as format selection tests",
    "prompt: marks tests as prompt generation tests",
    "image: marks tests as image rendering tests",
    "score: marks tests as scoring tests",
    "refine: marks tests as refinement tests",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.coverage.run]
branch = true
source = ["src/dspy_meme_gen"]
omit = [
    "tests/*",
    "docs/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "setup.py:version",
    "src/dspy_meme_gen/__init__.py:__version__",
]
update_changelog_on_bump = true
annotated_tag = true
changelog_file = "CHANGELOG.md"
changelog_incremental = true
changelog_start_rev = "v0.1.0"

[tool.bandit]
exclude_dirs = ["tests", "docs"]
targets = ["src/dspy_meme_gen"]
skips = ["B101"] 