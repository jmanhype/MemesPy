name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: dspy_meme
          POSTGRES_PASSWORD: dspy_meme
          POSTGRES_DB: dspy_meme_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run linting
      run: |
        ruff check src/ tests/
        # mypy src/  # Temporarily disabled due to 502+ type errors

    - name: Run tests
      env:
        APP_ENV: testing
        DATABASE_URL: postgresql+asyncpg://dspy_meme:dspy_meme@localhost:5432/dspy_meme_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest --cov=dspy_meme_gen --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      continue-on-error: true
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  deploy-staging:
    needs: test
    # Temporarily disabled until AWS credentials are configured
    if: false
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dspy-meme-gen
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Update ECS service
      run: |
        aws ecs update-service --cluster dspy-meme-staging --service meme-gen --force-new-deployment

  deploy-production:
    needs: deploy-staging
    # Temporarily disabled until AWS credentials are configured
    if: false
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update ECS service
      run: |
        aws ecs update-service --cluster dspy-meme-prod --service meme-gen --force-new-deployment

    - name: Create Sentry release
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: your-org
        SENTRY_PROJECT: dspy-meme-gen
      with:
        environment: production 