name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure deployment
        id: config
        run: |
          if [ "${{ inputs.environment }}" = "production" ]; then
            echo "url=https://memespy.app" >> $GITHUB_OUTPUT
            echo "namespace=production" >> $GITHUB_OUTPUT
          else
            echo "url=https://staging.memespy.app" >> $GITHUB_OUTPUT
            echo "namespace=staging" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "${{ inputs.version }}" ]; then
            echo "image=ghcr.io/${{ github.repository }}:main-${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "image=ghcr.io/${{ github.repository }}:${{ inputs.version }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Deploy to ${{ inputs.environment }}
        id: deploy
        run: |
          echo "üöÄ Deploying ${{ steps.config.outputs.image }} to ${{ inputs.environment }}"
          echo "url=${{ steps.config.outputs.url }}" >> $GITHUB_OUTPUT
          
          # Add your actual deployment script here
          # Examples:
          # - kubectl set image deployment/memespy memespy=${{ steps.config.outputs.image }} -n ${{ steps.config.outputs.namespace }}
          # - aws ecs update-service --cluster memespy-${{ inputs.environment }} --service memespy --force-new-deployment
          # - gcloud run deploy memespy --image=${{ steps.config.outputs.image }} --region=us-central1
      
      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests against ${{ steps.config.outputs.url }}"
          
          # Wait for deployment to be ready
          sleep 30
          
          # Health check
          curl -f ${{ steps.config.outputs.url }}/api/health || exit 1
          
          # Basic functionality test
          curl -f ${{ steps.config.outputs.url }}/api/v1/memes/formats || exit 1
      
      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const description = status === 'success' 
              ? 'Deployed to ${{ inputs.environment }} successfully' 
              : 'Deployment to ${{ inputs.environment }} failed';
            
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ inputs.environment }}',
              description: description,
              auto_merge: false,
              required_contexts: []
            });
      
      - name: Notify team
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Successfully deployed to ${{ inputs.environment }}!"
            echo "üîó URL: ${{ steps.config.outputs.url }}"
            echo "üè∑Ô∏è Version: ${{ steps.config.outputs.image }}"
          else
            echo "‚ùå Deployment to ${{ inputs.environment }} failed!"
          fi